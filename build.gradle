import com.matthewprenger.cursegradle.CurseUploadTask

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'com.modrinth.minotaur'
    id 'com.matthewprenger.cursegradle'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

String modVersion
if (System.getenv("RELEASE_TAG") != null) {
    String releaseTag = System.getenv("RELEASE_TAG")
    modVersion = releaseTag.substring(1)
    println("Detected Release Version: $modVersion")
} else {
    modVersion = project.mod_version
    println("Detected Local Version: $modVersion")
}

archivesBaseName = project.archives_base_name
version = modVersion
group = project.maven_group

repositories {
    maven {
        // EMI & Mod Menu
        name "TerraformersMC"
        url "https://maven.terraformersmc.com/releases/"
    }
    maven {
        // TechReborn
        name "CurseMaven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // Hephaestus, Mantle, Porting Lib
        name "devOS"
        url "https://mvn.devos.one/snapshots"
    }
    maven {
        // Forge Config API Port
        name "Fuzs Mod Resources"
        url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven"
    }
    maven {
        // Star
        name "Wisp Forest"
        url "https://maven.wispforest.io"
    }
    maven {
        // Cardinal Components API
        name "Ladysnake"
        url "https://ladysnake.jfrog.io/artifactory/mods"
    }
    maven {
        // Architectury, REI
        name "Architectury"
        url "https://maven.architectury.dev"
    }
    maven {
        // JEI
        name "BlameJared"
        url "https://maven.blamejared.com"
    }
    maven {
        // Fabric ASM
        name "JitPack"
        url "https://jitpack.io"
    }
}

dependencies {
    dependencies.ext.mod = { String dep ->
        modCompileOnly(dep) {
            exclude group: "net.fabricmc"
            exclude group: "net.fabricmc.fabric-api"
            exclude group: "com.jamieswhiteshirt"
            exclude group: "io.github.prospector"
            exclude group: "me.shedaniel"
            exclude group: "mezz.jei"
        }
        modLocalRuntime(dep) {
            exclude group: "net.fabricmc"
            exclude group: "net.fabricmc.fabric-api"
            exclude group: "com.jamieswhiteshirt"
            exclude group: "io.github.prospector"
            exclude group: "me.shedaniel"
            exclude group: "mezz.jei"
        }
    }

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // Don't commute Fabric or FAPI to anything that depends on us
    modCompileOnly "net.fabricmc:fabric-loader:${project.loader_version}"
    modLocalRuntime "net.fabricmc:fabric-loader:${project.loader_version}"
    modCompileOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modLocalRuntime "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // EMI
    modImplementation("dev.emi:emi:${project.emi_version}") {
        transitive = false
    }

    //
    // Mods we add EMI integration with and their dependencies
    //

    // Tech Reborn
    if (tech_reborn_enabled.toBoolean()) {
        dependencies.ext.mod "curse.maven:techreborn-233564:${project.tech_reborn_id}"
        dependencies.ext.mod "curse.maven:reborncore-237903:${project.reborn_core_id}"
        dependencies.ext.mod "teamreborn:energy:${project.energy_version}"
    }

    if (hephaestus_enabled.toBoolean()) {
        // i shouldn't need this
        dependencies.ext.mod "io.github.tropheusj:serialization-hooks:0.4.27"
        dependencies.ext.mod "slimeknights.mantle:Mantle:${project.mantle_version}"
        dependencies.ext.mod "slimeknights.tconstruct:Hephaestus:${project.hephaestus_version}"
    }

    //
    // Stuff we just want to have at runtime
    //

    // Mod Menu
    modLocalRuntime("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        exclude group: "net.fabricmc"
        exclude group: "net.fabricmc.fabric-api"
    }
}

sourceSets {
    main {
        java {
            if (!tech_reborn_enabled.toBoolean()) {
                exclude('com/kneelawk/extramodintegrations/techreborn')
            }
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.mrProjectId
    versionNumber = modVersion
    versionType = project.mrVeresionType
    def file = rootProject.file("changelogs/changelog-v${modVersion}.md")
    if (file.exists()) {
        changelog = file.text
    }
    uploadFile = tasks.remapJar
    additionalFiles = [tasks.sourcesJar]
    gameVersions = project.mrGameVersions.split("\\s*,\\s*").toList()
    loaders = project.mrLoaders.split("\\s*,\\s*").toList()
    dependencies {
        for (final def projectId in project.mrDependencies.split("\\s*,\\s*")) {
            required.project projectId
        }
    }
    syncBodyFrom = rootProject.file("README.md").text
}

String curseApiKey = System.getenv("CURSE_API_KEY")
if (curseApiKey != null) {
    curseforge {
        apiKey = curseApiKey
        project {
            id = project.cfProjectId
            changelogType = 'markdown'
            changelog = rootProject.file("changelogs/changelog-v${modVersion}.md")
            releaseType = project.cfReleaseType
            project.cfMinecraftVersions.split("\\s*,\\s*").each {addGameVersion(it)}
            mainArtifact(tasks.remapJar)
            relations {
                project.cfDependencies.split("\\s*,\\s*").each {requiredDependency(it)}
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }
}
tasks.withType(CurseUploadTask).configureEach {
    doLast {
        file("curse-file-id.txt").text = mainArtifact.fileID
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        if (System.getenv("PUBLISH_REPO") != null) {
            maven {
                name = "publishRepo"
                url = uri(System.getenv("PUBLISH_REPO"))
            }
        }
    }
}
